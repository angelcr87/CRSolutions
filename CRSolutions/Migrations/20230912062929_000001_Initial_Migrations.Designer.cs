// <auto-generated />
using System;
using CRSolutions.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRSolutions.Migrations
{
    [DbContext(typeof(CRSolutionsDBContext))]
    [Migration("20230912062929_000001_Initial_Migrations")]
    partial class _000001_Initial_Migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRSolutions.Models.Candidate", b =>
                {
                    b.Property<Guid>("IdCantidate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AudioFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("BlackList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CURP")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<byte[]>("CreditFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("EvaluatedPosition")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<Guid>("IdCompany")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdRiskScore")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeTest")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecordEvaluation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<byte[]>("ReportFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdCantidate");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdUser");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CRSolutions.Models.Company", b =>
                {
                    b.Property<Guid>("IdCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<bool>("Credits")
                        .HasColumnType("bit");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdCompany");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            IdCompany = new Guid("127cfef3-3e5d-4b47-b58d-19adb61cf6be"),
                            BusinessName = "razon Social",
                            CompanyDescription = "Compania Inicial",
                            CompanyName = "CRSolutions",
                            Credits = true,
                            RFC = "RFC",
                            Status = true
                        });
                });

            modelBuilder.Entity("CRSolutions.Models.Role", b =>
                {
                    b.Property<Guid>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            IdRol = new Guid("4a74da66-bcd1-4662-8625-cb7c3bf2a837"),
                            Description = "Puede crear nuevos candidatos",
                            RoleName = "Admin",
                            Status = true
                        },
                        new
                        {
                            IdRol = new Guid("789a3411-ed70-42bd-9681-b0d9ae800583"),
                            Description = "Puede todos los candidatos",
                            RoleName = "Cliente Admin",
                            Status = true
                        },
                        new
                        {
                            IdRol = new Guid("882e1047-29e1-4276-8bce-6f2372670ae1"),
                            Description = "puede ver unicamente sus candidatos",
                            RoleName = "Cliente",
                            Status = true
                        });
                });

            modelBuilder.Entity("CRSolutions.Models.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)");

                    b.Property<Guid>("IdCompany")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdRol")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdRol");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            IdUser = new Guid("5a689fe8-5bc5-481f-a1ca-399562d6da2c"),
                            FullName = "Administrador",
                            IdCompany = new Guid("127cfef3-3e5d-4b47-b58d-19adb61cf6be"),
                            IdRol = new Guid("4a74da66-bcd1-4662-8625-cb7c3bf2a837"),
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Status = true,
                            UserName = "Admin"
                        },
                        new
                        {
                            IdUser = new Guid("85535ac0-2b9c-4f52-994c-2af88799d605"),
                            FullName = "Cliente Administrador",
                            IdCompany = new Guid("127cfef3-3e5d-4b47-b58d-19adb61cf6be"),
                            IdRol = new Guid("789a3411-ed70-42bd-9681-b0d9ae800583"),
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Status = true,
                            UserName = "Cliente_Admin"
                        },
                        new
                        {
                            IdUser = new Guid("15fe19da-3dec-4d15-9a63-74bed4a038d3"),
                            FullName = "Cliente",
                            IdCompany = new Guid("127cfef3-3e5d-4b47-b58d-19adb61cf6be"),
                            IdRol = new Guid("882e1047-29e1-4276-8bce-6f2372670ae1"),
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Status = true,
                            UserName = "Cliente"
                        });
                });

            modelBuilder.Entity("CRSolutions.Models.Candidate", b =>
                {
                    b.HasOne("CRSolutions.Models.Company", "Company")
                        .WithMany("Candidates")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRSolutions.Models.User", "User")
                        .WithMany("Candidates")
                        .HasForeignKey("IdUser");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRSolutions.Models.User", b =>
                {
                    b.HasOne("CRSolutions.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRSolutions.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CRSolutions.Models.Company", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRSolutions.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRSolutions.Models.User", b =>
                {
                    b.Navigation("Candidates");
                });
#pragma warning restore 612, 618
        }
    }
}
